/**
 * File:	clients/slp.ycp
 * Package:	SLP
 * Summary:	SLP Browser
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * Browse SLP services
 */
{
    import "SLP";
    textdomain "slp";
    import "Wizard";
    import "Label";

    define term createTableItem(map srv) ``{

        term tabitem = `item();

        string srvurl = srv["srvurl"]:"";

        tabitem = `item(
                `id( srvurl),
                substring(srv["pcSrvType"]:"", 8 ),
                substring(srv["srvurl"]:"", 8 ),
                srv["lifetime"]:0
                );
        return tabitem;
    }
    define term createTreeItem(string srvType, list<string> Sub) ``{

        term treeitem = `item();

        Sub = filter(string s, Sub, ``(s!=""));
        list subitems = maplist(string s, Sub, ``{
                term si = `item();
                string Id = "service:" + srvType + ":" + s;
                si = `item(`id(Id), s);
                return si;
                });
        if (size(subitems) > 0 )
        {
        treeitem = `item(
                `id( "service:" + srvType),
                srvType, subitems
                );
        } else {
        treeitem = `item(
                `id( "service:" + srvType),
                srvType
                );
        }
        return treeitem;
    }

    define list fillTable(list<map> response) ``{
        list items = maplist(map srv, response, ``{
                return(createTableItem(srv));
                });

        return items;
    }

    define map<string, list<string> > processTree(list<string> typeResponse ) ``{
        map<string, list<string> > treeData = $[];
        foreach(string t, typeResponse, ``{
                list<string> tok = splitstring(t, ":");
                list<string> s = [];
                s=add(s, tok[2]:"" );
                string t1 = tok[1]:"";
                if (!haskey(treeData, t1) )
                {
                    treeData[t1] = s ;
                }
                else
                {
                    list old = treeData[t1]:[];
                    treeData[t1] = (list<string>)union(s,old) ;
                }
                });
        return treeData;
    }


    define list fillTree(list<string> typeResponse) ``{
        map<string, list<string> > data = processTree(typeResponse);
        list items = maplist(string type, list<string> sub,  data, ``{
                return(createTreeItem(type, sub));
                });

        return items;
    }


    /*
    list<map> response = SLP::FindSrvs("CIM-Object-Manager");
    */
    list tableItems = [];
    list treeItems = [];

    term contents =
        `Top(
                `VBox(
                    `Table( `id( `table ), `opt( `notify,  `immediate),
                        `header( _("Type"), _("URL"), _("Lifetime") ),
                        tableItems ),
                    `RichText(`id(`attr),  "" )
                    )
            );

    string title = _("SLP Browser");
    Wizard::CreateDialog();

    Wizard::SetContentsButtons(title, contents, "", Label::BackButton(),
            Label::FinishButton());

    Wizard::HideAbortButton();
    UI::ChangeWidget(`id(`back), `Enabled, false);

    list<string> typeResponse = SLP::FindSrvTypes("*", "");

    treeItems = fillTree(typeResponse);
    UI::ReplaceWidget(`id(`helpSpace) ,
            `VBox(
                `Tree(
                    `id(`tree),
                    `opt(`notify,`vstretch),
                    _("Service Types"),
                    treeItems
                    ),
                `VSpacing(1))
            );


    any input = nil;
    map cache = $[];
    map attrcache = $[];
    repeat {

        string srvtype = "";
        string srv = "";
        input = Wizard::UserInput();
        y2debug("input: %1", input);
        if (input == `tree)
            srvtype = (string) UI::QueryWidget(`id(`tree), `CurrentItem);
        else if (input == `table )
            srv = (string) UI::QueryWidget(`id(`table), `CurrentItem);
        y2debug("srvtype: %1", srvtype );
        y2debug("srv: %1", srv );
        list<map> srvsResponse = [];
        if(haskey(cache, srvtype))
        {
            srvsResponse = cache[srvtype]:[];
        }
        else
        {
            srvsResponse = SLP::FindSrvs(srvtype , "");
            cache[srvtype] = srvsResponse;
        }
        tableItems = fillTable(srvsResponse);

        list<string> attr = [];
        string sum = "";

        foreach(map s , srvsResponse, ``{
                string srvurl = s["srvurl"]:"";
                if(haskey(attrcache, srvurl))
                {
                attr = attrcache[srvurl]:[];
                }
                else
                {
                y2debug("s: %1", s);
                attr = SLP::FindAttrs(srvurl);
                y2debug("attr: %1", attr);
                attrcache[srvurl] = attr;
                }
                });

        if (input == `tree)
        {
            UI::ChangeWidget(`id(`table), `Items, tableItems);
            srv = srvsResponse[0,"srvurl"]:"xxx";
            sum = SLP::AttrSummary(attrcache[srv]:[]);
            UI::ChangeWidget(`id(`attr), `Value, sum);
        }
        else if (input == `table )
        {
            sum = SLP::AttrSummary(attrcache[srv]:[]);
            UI::ChangeWidget(`id(`attr), `Value, sum);
        }

    } until (input == `next || input == `abort || input == `back );

    UI::CloseDialog();
    return input;
    // EOF
}
