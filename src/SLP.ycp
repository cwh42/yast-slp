/**
 * File:	modules/SLP.ycp
 * Package:	SLP Browser / Agent
 * Summary:	Access to SLP Agent functions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 */
{

    module "SLP";
    textdomain "slp";
    import "Summary";
    import "HTML";


    string Regd = "/etc/slp.reg.d";

    /**
      * Issue the query for services
      * @param string The Service Type String, including authority string if
      * any, for the request, such as can be discovered using  SLPSrvTypes(). 
      * This could be, for example "service:printer:lpr" or "service:nfs".
      * @param string comma separated  list of scope names to search for
      * service types.
      * @return list<map> List of Services
      */
    global define list<map> FindSrvs( string pcServiceType, string pcScopeList) ``{
        list<map> Srvs = (list<map>) SCR::Read(.slp.findsrvs,
                $["pcServiceType":pcServiceType, "pcScopeList": pcScopeList] );
        return Srvs;
    }

    /**
      * Issues an SLP service type request for service types in the scopes
      * indicated by the pcScopeList. If the naming authority is "*", then
      * results are returned for all naming authorities.  If the naming
      * authority is the empty string, i.e.  "", then the default naming
      * authority, "IANA", is used.
      * @param string The naming authority to search.
      * @param string comma separated  list of scope names to search for
      * service types.
      * @return list<string> Service Types
      */
    global define list<string> FindSrvTypes ( string pcNamingAuthority , string pcScopeList) ``{
        list<string> Types = (list<string>) SCR::Read(.slp.findsrvtypes,
                                $["pcNamingAuthority":pcNamingAuthority ,
                                  "pcScopeList": pcScopeList] );
        return Types;
    }


    /**
      * Find attributes of a service
      * @param string service url or type
      * @return list attributes
      */
    global define list<string> FindAttrs ( string pcURLOrServiceType ) ``{
        list<string> Attrs = (list<string>) SCR::Read(.slp.findattrs,
                                $["pcURLOrServiceType":pcURLOrServiceType] );
        return Attrs;
    }

    /**
      * Attribute summary
      * @param list<string> attribute list
      * @result string summary
      */
    global define string AttrSummary (list<string> Attrs) ``{
       string summary = "";
       summary = Summary::AddHeader(summary, _("Attributes"));
       summary = Summary::OpenList      ( summary );
       foreach(string a, Attrs, ``{
               string s = substring(a, 1, size(a) - 2 );
               list aa = splitstring(s, "=");
               summary = Summary::AddListItem   ( summary, sformat("%1: %2",
                   HTML::Bold(aa[0]:""), aa[1]:"") );
               });

       summary = Summary::CloseList     ( summary );
       return summary;
    }

    /**
      * Register service with SLP
      * @param string service
      * @return boolean
      */
    global define boolean Reg(string service) ``{

        boolean ret = (boolean)SCR::Execute(.slp.reg, service);
        return ret;
    }

    /**
      * Deregister service with SLP
      * @param string service
      * @return boolean
      */
    global define boolean DeReg(string service) ``{

        boolean ret = (boolean)SCR::Execute(.slp.dereg, service);
        return ret;
    }

    /**
      * Register service with SLP using a reg file
      * @param string service
      * @param map attr
      * @param string regfile
      * @return boolean
      */
    global define boolean RegFile(string service, map attr, string regfile) ``{
        list<string> slp = [];
        slp=add(slp, service);
        foreach(string k, string v , attr, ``{
                slp=add(slp, sformat("%1=%2", tolower(k), v ));
                });

        string all = mergestring(slp, "\n");
        boolean ret =(boolean) SCR::Write(.target.string,    sformat("%1/%2", Regd, regfile), all);
        return ret;
    }

    /**
      * De-Register service with SLP by removing the reg file
      * @param string regfile
      * @return boolean
      */
    global define boolean DeRegFile(string regfile) ``{

        boolean ret = (boolean)SCR::Execute(.target.remove, regfile);
        return ret;
    }
}
